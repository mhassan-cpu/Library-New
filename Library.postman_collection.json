{
	"info": {
		"_postman_id": "94f12674-06ec-441d-8f17-78ba0a7e1be2",
		"name": "Library",
		"description": "This project demonstrates a RESTful API built with **Node.js** and **JSON Server**. It includes endpoints for **Books**, **Households**, **Users**, and **Wishlists**, supporting full CRUD operations: **Create**, **Read**, **Update**, and **Delete**\n\n<img src=\"https://content.pstmn.io/1b2ca7bb-3fcc-4950-9329-45fb0c51ab22/aW1hZ2VzLnBuZw==\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18930967",
		"_collection_link": "https://yxyxyxyxyxyx.postman.co/workspace/1def04b0-3f5c-47d0-9844-9972422a2811/collection/18930967-94f12674-06ec-441d-8f17-78ba0a7e1be2?action=share&source=collection_link&creator=18930967"
	},
	"item": [
		{
			"name": "1- Books",
			"item": [
				{
					"name": "1.1 Create New Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.2] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.2] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.4] TC04 - Validate that response body is a valid JSON\r",
									"pm.test(\"[1.4] TC04 - Validate that response body is a valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// [2.1] TC05 - Validate presence of all required fields\r",
									"const jsonData = pm.response.json();\r",
									"const requiredFields = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"\r",
									"pm.test(\"[2.1] TC05 - Validate presence of all required fields\", function () {\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.2] TC06 - Validate field data types are correct\r",
									"pm.test(\"[2.2] TC06 - Validate field data types are correct\", function () {\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isbn).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.releaseDate).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.3] TC07 - Validate that ID is a positive integer\r",
									"pm.test(\"[2.3] TC07 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"// [2.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\r",
									"pm.test(\"[2.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.5] TC09 - Validate that updatedAt is equal to or after createdAt\r",
									"pm.test(\"[2.5] TC09 - Validate that updatedAt is equal to or after createdAt\", function () {\r",
									"    const created = new Date(jsonData.createdAt);\r",
									"    const updated = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updated.getTime()).to.be.at.least(created.getTime());\r",
									"});\r",
									"\r",
									"// [2.6] TC10 - Validate that title, author, and isbn are not empty\r",
									"pm.test(\"[2.6] TC10 - Validate that title, author, and isbn are not empty\", function () {\r",
									"    pm.expect(jsonData.title).to.not.be.empty;\r",
									"    pm.expect(jsonData.author).to.not.be.empty;\r",
									"    pm.expect(jsonData.isbn).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.7] TC11 - Validate that releaseDate is not a future date\", function () {\r",
									"    const release = new Date(jsonData.releaseDate);\r",
									"    const now = new Date();\r",
									"    pm.expect(release.getTime()).to.be.below(now.getTime());\r",
									"});\r",
									"\r",
									"pm.test(\"[3.1] TC12 - Validate that id is unique across requests\", function () {\r",
									"    let previousId = pm.collectionVariables.get(\"previous_id\");\r",
									"    if (previousId) {\r",
									"        pm.expect(jsonData.id).to.not.eql(Number(previousId));\r",
									"    }\r",
									"    pm.collectionVariables.set(\"previous_id\", jsonData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.2] TC13 - Validate no extra fields are present\", function () {\r",
									"    const actualKeys = Object.keys(jsonData);\r",
									"    const expectedKeys = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"    pm.expect(actualKeys).to.have.members(expectedKeys);\r",
									"    pm.expect(actualKeys.length).to.eql(expectedKeys.length);\r",
									"});\r",
									"\r",
									"pm.test(\"[3.3] TC14 - Validate createdAt and updatedAt are equal on creation\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"],\r",
									"    \"properties\": {\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"author\": { \"type\": \"string\" },\r",
									"        \"isbn\": { \"type\": \"string\" },\r",
									"        \"releaseDate\": { \"type\": \"string\" },\r",
									"        \"createdAt\": { \"type\": \"string\" },\r",
									"        \"updatedAt\": { \"type\": \"string\" },\r",
									"        \"id\": { \"type\": \"number\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"[4.1] TC15 - Validate response against JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"BookID\",pm.response.json().id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomWord}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"isbn\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}\",\r\n    \"releaseDate\": \"{{$isoTimestamp}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books",
							"host": [
								"{{baseURL}}books"
							]
						},
						"description": "### Create a new book\n\n**HTTP POST** request to {{baseURL}}books.\n\n#### Request Body\n\n- { \"title\": \"{{$randomWord}}\", \"author\": \"{{$randomFullName}}\", \"isbn\": \"{{$randomInt}}-{{$randomInt}}- ...\", \"releaseDate\": \"{{$isoTimestamp}}\"}\n    \n\n#### Response\n\nThe response of this request can be documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\"type\": \"string\"},\n    \"author\": {\"type\": \"string\"},\n    \"isbn\": {\"type\": \"string\"},\n    \"releaseDate\": {\"type\": \"string\"},\n    \"createdAt\": {\"type\": \"string\"},\n    \"updatedAt\": {\"type\": \"string\"},\n    \"id\": {\"type\": \"integer\"}\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.1 Create New Book",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"withdrawal\",\r\n    \"author\": \"Alejandro Rath DVM\",\r\n    \"isbn\": \"760-437-75\",\r\n    \"releaseDate\": \"2025-05-04T20:02:02.449Z\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "220"
								},
								{
									"key": "ETag",
									"value": "W/\"dc-Av7Ltje72lv3Sa/qtzdfHT93c/0\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:33:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Checking\",\n    \"author\": \"Marty Moore\",\n    \"isbn\": \"288-306-637\",\n    \"releaseDate\": \"2025-05-04T12:33:12.636Z\",\n    \"createdAt\": \"2025-05-04T12:33:12.650Z\",\n    \"updatedAt\": \"2025-05-04T12:33:12.650Z\",\n    \"id\": 55\n}"
						}
					]
				},
				{
					"name": "1.2 Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.2] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.2] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.2] TC02 - Validate that response time is under 1000ms\r",
									"pm.test(\"[1.2] TC02 - Validate that response time is under 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// [1.2] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.2] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.2] TC04 - Validate that response body is a valid array\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"[1.2] TC04 - Validate that response body is a valid array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [1.2] TC05 - Validate that each book has required fields\r",
									"pm.test(\"[1.2] TC05 - Validate that each book has required fields\", function () {\r",
									"    jsonData.forEach(book => {\r",
									"        pm.expect(book).to.have.property(\"id\");\r",
									"        pm.expect(book).to.have.property(\"title\");\r",
									"        pm.expect(book).to.have.property(\"author\");\r",
									"        pm.expect(book).to.have.property(\"isbn\");\r",
									"        pm.expect(book).to.have.property(\"createdAt\");\r",
									"        pm.expect(book).to.have.property(\"updatedAt\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.2] TC06 - Validate field data types for each book\r",
									"pm.test(\"[1.2] TC06 - Validate field data types for each book\", function () {\r",
									"    jsonData.forEach(book => {\r",
									"        pm.expect(book.id).to.be.a(\"number\");\r",
									"        pm.expect(book.title).to.be.a(\"string\");\r",
									"        pm.expect(book.author).to.be.a(\"string\");\r",
									"        pm.expect(book.isbn).to.be.a(\"string\");\r",
									"        pm.expect(book.createdAt).to.be.a(\"string\");\r",
									"        pm.expect(book.updatedAt).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.2] TC07 - Validate that all books have unique IDs\r",
									"pm.test(\"[1.2] TC07 - Validate that all books have unique IDs\", function () {\r",
									"    const ids = jsonData.map(book => book.id);\r",
									"    const uniqueIds = [...new Set(ids)];\r",
									"    pm.expect(ids.length).to.eql(uniqueIds.length);\r",
									"});\r",
									"\r",
									"// [1.2] TC08 - Validate ISO 8601 format for createdAt and updatedAt\r",
									"pm.test(\"[1.2] TC08 - Validate ISO 8601 format for createdAt and updatedAt\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    jsonData.forEach(book => {\r",
									"        pm.expect(book.createdAt).to.match(isoRegex);\r",
									"        pm.expect(book.updatedAt).to.match(isoRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.2] TC09 - Validate optional presence and structure of 'links' array\r",
									"pm.test(\"[1.2] TC08 - Validate optional 'links' array format\", function () {\r",
									"    jsonData.forEach(book => {\r",
									"        if (book.links) {\r",
									"            pm.expect(book.links).to.be.an(\"array\");\r",
									"            book.links.forEach(link => {\r",
									"                pm.expect(link).to.have.property(\"rel\");\r",
									"                pm.expect(link).to.have.property(\"href\");\r",
									"                pm.expect(link.rel).to.be.a(\"string\");\r",
									"                pm.expect(link.href).to.be.a(\"string\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// [1.2] TC10 - Validate no extra unexpected fields are present\r",
									"pm.test(\"[1.2] TC10 - Validate no extra unexpected fields are present\", function () {\r",
									"    const expectedFields = [\"id\", \"title\", \"author\", \"isbn\", \"publicationDate\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"links\"];\r",
									"    jsonData.forEach(book => {\r",
									"        Object.keys(book).forEach(key => {\r",
									"            pm.expect(expectedFields).to.include(key);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "G-Token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}books",
							"host": [
								"{{baseURL}}books"
							]
						},
						"description": "### Retrieve all books\n\nThis endpoint makes an HTTP GET request to retrieve all books.\n\n#### Response\n\nThe response for this request is a JSON array with the following schema:\n\n``` json\n[\n  {\n    \"id\": \"number\",\n    \"title\": \"string\",\n    \"author\": \"string\",\n    \"publicationDate\": \"string\",\n    \"isbn\": \"string\",\n    \"createdAt\": \"string\",\n    \"updatedAt\": \"string\",\n    \"releaseDate\": \"string\"\n  }\n]\n\n ```"
					},
					"response": [
						{
							"name": "1.2 Get All Books",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "G-Token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"3ed7-Q7+7Bgd6KGbnTN2m4JPfn6zgxtQ\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:33:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"title\": \"Gloves\",\n        \"author\": \"Gerardo Lebsack\",\n        \"publicationDate\": \"1998-06-01T00:00:00.000Z\",\n        \"isbn\": \"213-234-94\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2025-05-04T09:54:16.836Z\",\n        \"releaseDate\": \"2025-05-04T09:54:16.809Z\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"Lectures to My Students\",\n        \"author\": \"Charles Spurgeon\",\n        \"publicationDate\": \"2010-04-15T00:00:00.000Z\",\n        \"isbn\": \"1598565176\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"The Screwtape Letters\",\n        \"author\": \"C. S. Lewis\",\n        \"publicationDate\": \"2015-03-21T00:00:00.000Z\",\n        \"isbn\": \"0060652934\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"title\": \"You Are What You Love: The Spiritual Power of Habit\",\n        \"author\": \"James K.A. Smith\",\n        \"isbn\": \"158743380X\",\n        \"releaseDate\": \"2016-03-05\",\n        \"createdAt\": \"2021-06-22T22:15:41.821Z\",\n        \"updatedAt\": \"2021-06-22T22:15:41.821Z\",\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/5\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:44:37.598Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.598Z\",\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/6\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:44:37.624Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.624Z\",\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/7\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:44:37.643Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.643Z\",\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/8\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:44:37.660Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.660Z\",\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/9\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:44:48.343Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.343Z\",\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/10\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:44:48.362Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.362Z\",\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/11\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:44:48.382Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.382Z\",\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/12\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:44:48.402Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.402Z\",\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/13\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:53:22.817Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.817Z\",\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/14\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:53:22.845Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.845Z\",\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/15\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:53:22.866Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.866Z\",\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/16\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:22.887Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.887Z\",\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/17\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:53:44.501Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.501Z\",\n        \"id\": 18,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/18\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:53:44.527Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.527Z\",\n        \"id\": 19,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/19\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:53:44.543Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.543Z\",\n        \"id\": 20,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/20\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.563Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.563Z\",\n        \"id\": 21,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/21\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.584Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.584Z\",\n        \"id\": 22,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/22\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.602Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.602Z\",\n        \"id\": 23,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/23\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.620Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.620Z\",\n        \"id\": 24,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/24\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.644Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.644Z\",\n        \"id\": 25,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/25\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.664Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.664Z\",\n        \"id\": 26,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/26\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104524\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.686Z\",\n        \"updatedAt\": \"2025-03-31T00:50:12.307Z\",\n        \"id\": 27,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/27\"\n            }\n        ]\n    },\n    {\n        \"title\": \"test\",\n        \"author\": \"test\",\n        \"isbn\": \"test\",\n        \"releaseDate\": \"11/11/2025\",\n        \"createdAt\": \"2025-05-03T13:26:38.004Z\",\n        \"updatedAt\": \"2025-05-03T13:26:38.004Z\",\n        \"id\": 28\n    },\n    {\n        \"title\": \"egerb\",\n        \"author\": \"dfbdfb\",\n        \"isbn\": \"dfbdfb\",\n        \"releaseDate\": \"11/11/2025\",\n        \"createdAt\": \"2025-05-03T13:31:25.953Z\",\n        \"updatedAt\": \"2025-05-03T13:31:25.953Z\",\n        \"id\": 29\n    },\n    {\n        \"title\": \"wfer\",\n        \"author\": \"ergerg\",\n        \"isbn\": \"ergerg\",\n        \"releaseDate\": \"11/11/2025\",\n        \"createdAt\": \"2025-05-03T13:34:37.943Z\",\n        \"updatedAt\": \"2025-05-03T13:34:37.943Z\",\n        \"id\": 30\n    },\n    {\n        \"title\": \"restassured\",\n        \"author\": \"test\",\n        \"isbn\": \"test\",\n        \"releaseDate\": \"11-11-2025\",\n        \"createdAt\": \"2025-05-03T14:22:50.106Z\",\n        \"updatedAt\": \"2025-05-03T14:22:50.106Z\",\n        \"id\": 31\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-03T14:43:17.863Z\",\n        \"updatedAt\": \"2025-05-03T14:43:17.863Z\",\n        \"id\": 32\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-03T15:34:31.244Z\",\n        \"updatedAt\": \"2025-05-03T15:34:31.244Z\",\n        \"id\": 33\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-03T15:34:48.129Z\",\n        \"updatedAt\": \"2025-05-03T15:34:48.129Z\",\n        \"id\": 34\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-03T15:35:07.084Z\",\n        \"updatedAt\": \"2025-05-03T15:35:07.084Z\",\n        \"id\": 35\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-03T15:36:10.204Z\",\n        \"updatedAt\": \"2025-05-03T15:36:10.204Z\",\n        \"id\": 36\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-03T15:37:45.195Z\",\n        \"updatedAt\": \"2025-05-03T15:37:45.195Z\",\n        \"id\": 37\n    },\n    {\n        \"title\": \"dgbdfb\",\n        \"author\": \"dfbdf\",\n        \"isbn\": \"dfbfd\",\n        \"releaseDate\": \"dfbfd\",\n        \"createdAt\": \"2025-05-04T09:27:46.070Z\",\n        \"updatedAt\": \"2025-05-04T09:27:46.070Z\",\n        \"id\": 38\n    },\n    {\n        \"title\": \"Book Title\",\n        \"author\": \"Author\",\n        \"isbn\": \"ISBN\",\n        \"releaseDate\": \"Release Date\",\n        \"createdAt\": \"2025-05-04T09:46:45.169Z\",\n        \"updatedAt\": \"2025-05-04T09:46:45.169Z\",\n        \"id\": 39\n    },\n    {\n        \"title\": \"Book invoice\",\n        \"author\": \"Author Preston Brekke\",\n        \"isbn\": \"93-354-320\",\n        \"releaseDate\": \"2025-05-04T09:52:13.958Z\",\n        \"createdAt\": \"2025-05-04T09:52:13.988Z\",\n        \"updatedAt\": \"2025-05-04T09:52:13.988Z\",\n        \"id\": 40\n    },\n    {\n        \"title\": \"Book Mobility\",\n        \"author\": \"Author Nelson Gerlach\",\n        \"isbn\": \"346-975-45\",\n        \"releaseDate\": \"2025-05-04T09:52:15.443Z\",\n        \"createdAt\": \"2025-05-04T09:52:15.477Z\",\n        \"updatedAt\": \"2025-05-04T09:52:15.477Z\",\n        \"id\": 41\n    },\n    {\n        \"title\": \"Book Tactics\",\n        \"author\": \"Author Robert Nolan IV\",\n        \"isbn\": \"874-6-979\",\n        \"releaseDate\": \"2025-05-04T09:52:16.506Z\",\n        \"createdAt\": \"2025-05-04T09:52:16.529Z\",\n        \"updatedAt\": \"2025-05-04T09:52:16.529Z\",\n        \"id\": 42\n    },\n    {\n        \"title\": \"Book Account\",\n        \"author\": \"Author Tony Auer II\",\n        \"isbn\": \"284-933-891\",\n        \"releaseDate\": \"2025-05-04T09:52:17.665Z\",\n        \"createdAt\": \"2025-05-04T09:52:17.685Z\",\n        \"updatedAt\": \"2025-05-04T09:52:17.685Z\",\n        \"id\": 43\n    },\n    {\n        \"title\": \"Book Producer\",\n        \"author\": \"Author Gregg Bernhard\",\n        \"isbn\": \"290-19-602\",\n        \"releaseDate\": \"2025-05-04T09:52:19.378Z\",\n        \"createdAt\": \"2025-05-04T09:52:19.404Z\",\n        \"updatedAt\": \"2025-05-04T09:52:19.404Z\",\n        \"id\": 44\n    },\n    {\n        \"title\": \"Book service-desk\",\n        \"author\": \"Author Miss Elsa Dibbert\",\n        \"isbn\": \"170-947-544\",\n        \"releaseDate\": \"2025-05-04T09:52:20.218Z\",\n        \"createdAt\": \"2025-05-04T09:52:20.242Z\",\n        \"updatedAt\": \"2025-05-04T09:52:20.242Z\",\n        \"id\": 45\n    },\n    {\n        \"title\": \"Avon\",\n        \"author\": \"Nicole Oberbrunner\",\n        \"isbn\": \"174-323-886\",\n        \"releaseDate\": \"2025-05-04T09:52:32.333Z\",\n        \"createdAt\": \"2025-05-04T09:52:32.362Z\",\n        \"updatedAt\": \"2025-05-04T09:52:32.362Z\",\n        \"id\": 46\n    },\n    {\n        \"title\": \"Shoes\",\n        \"author\": \"Debra Trantow\",\n        \"isbn\": \"85-783-904\",\n        \"releaseDate\": \"2025-05-04T09:52:33.448Z\",\n        \"createdAt\": \"2025-05-04T09:52:33.468Z\",\n        \"updatedAt\": \"2025-05-04T09:52:33.468Z\",\n        \"id\": 47\n    },\n    {\n        \"title\": \"haptic\",\n        \"author\": \"Israel Howe\",\n        \"isbn\": \"907-538-255\",\n        \"releaseDate\": \"2025-05-04T09:52:34.660Z\",\n        \"createdAt\": \"2025-05-04T09:52:34.686Z\",\n        \"updatedAt\": \"2025-05-04T09:52:34.686Z\",\n        \"id\": 48\n    },\n    {\n        \"title\": \"Operations\",\n        \"author\": \"Hugh Ondricka DVM\",\n        \"isbn\": \"590-482-528\",\n        \"releaseDate\": \"2025-05-04T09:52:36.626Z\",\n        \"createdAt\": \"2025-05-04T09:52:36.650Z\",\n        \"updatedAt\": \"2025-05-04T09:52:36.650Z\",\n        \"id\": 49\n    },\n    {\n        \"title\": \"purple\",\n        \"author\": \"Kenny Corkery\",\n        \"isbn\": \"318-257-524\",\n        \"releaseDate\": \"2025-05-04T09:52:44.640Z\",\n        \"createdAt\": \"2025-05-04T09:52:44.669Z\",\n        \"updatedAt\": \"2025-05-04T09:52:44.669Z\",\n        \"id\": 50\n    },\n    {\n        \"title\": \"Yen\",\n        \"author\": \"Mr. Marcos Hoeger\",\n        \"isbn\": \"239-0-108\",\n        \"releaseDate\": \"2025-05-04T09:52:45.541Z\",\n        \"createdAt\": \"2025-05-04T09:52:45.553Z\",\n        \"updatedAt\": \"2025-05-04T09:52:45.553Z\",\n        \"id\": 51\n    },\n    {\n        \"title\": \"Turnpike\",\n        \"author\": \"Wilbur Wisozk\",\n        \"isbn\": \"522-460-573\",\n        \"releaseDate\": \"2025-05-04T09:52:48.335Z\",\n        \"createdAt\": \"2025-05-04T09:52:48.361Z\",\n        \"updatedAt\": \"2025-05-04T09:52:48.362Z\",\n        \"id\": 52\n    },\n    {\n        \"title\": \"Franc\",\n        \"author\": \"Ms. Dora Dietrich\",\n        \"isbn\": \"914-481-108\",\n        \"releaseDate\": \"2025-05-04T09:57:45.933Z\",\n        \"createdAt\": \"2025-05-04T09:57:45.940Z\",\n        \"updatedAt\": \"2025-05-04T09:57:45.940Z\",\n        \"id\": 53\n    },\n    {\n        \"title\": \"olive\",\n        \"author\": \"Kristina Ziemann\",\n        \"isbn\": \"496-407-774\",\n        \"releaseDate\": \"2025-05-04T10:04:11.590Z\",\n        \"createdAt\": \"2025-05-04T10:04:11.596Z\",\n        \"updatedAt\": \"2025-05-04T10:04:11.596Z\",\n        \"id\": 54\n    },\n    {\n        \"title\": \"Checking\",\n        \"author\": \"Marty Moore\",\n        \"isbn\": \"288-306-637\",\n        \"releaseDate\": \"2025-05-04T12:33:12.636Z\",\n        \"createdAt\": \"2025-05-04T12:33:12.650Z\",\n        \"updatedAt\": \"2025-05-04T12:33:12.650Z\",\n        \"id\": 55\n    },\n    {\n        \"title\": \"infomediaries\",\n        \"author\": \"Mr. Raul Bogisich\",\n        \"isbn\": \"401-294-17\",\n        \"releaseDate\": \"2025-05-04T12:33:17.476Z\",\n        \"createdAt\": \"2025-05-04T12:33:17.489Z\",\n        \"updatedAt\": \"2025-05-04T12:33:17.489Z\",\n        \"id\": 56\n    }\n]"
						}
					]
				},
				{
					"name": "1.3 Get Book By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.3] TC04 - Validate that response body is a valid JSON object\r",
									"pm.test(\"[1.3] TC04 - Validate that response body is a valid JSON object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [1.3] TC05 - Validate presence of all required fields\r",
									"const jsonData = pm.response.json();\r",
									"const requiredFields = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"\r",
									"pm.test(\"[1.3] TC05 - Validate presence of all required fields\", function () {\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.3] TC06 - Validate field data types\r",
									"pm.test(\"[1.3] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isbn).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.releaseDate).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [1.3] TC07 - Validate that ID in response is positive\r",
									"pm.test(\"[1.3] TC07 - Validate that ID in response is positive\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"// [1.3] TC08 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[1.3] TC08 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [1.3] TC09 - Validate releaseDate is a valid ISO 8601 date\r",
									"pm.test(\"[1.3] TC09 - Validate releaseDate is a valid ISO 8601 date\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.releaseDate).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [1.3] TC10 - Validate that createdAt and updatedAt match on fetch\r",
									"pm.test(\"[1.3] TC10 - Validate that createdAt and updatedAt match on fetch\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}books/:bookid",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":bookid"
							],
							"variable": [
								{
									"key": "bookid",
									"value": "{{BookID}}"
								}
							]
						},
						"description": "### Retrieve a book by its ID\n\n#### Request\n\nThis endpoint retrieves a book by its ID.\n\n#### Response\n\nThe response for this request is in the form of a JSON schema:\n\n``` json\n{\n    \"title\": \"\",\n    \"author\": \"\",\n    \"isbn\": \"\",\n    \"releaseDate\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"id\": 0\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.3 Get Book By ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books/:bookid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										":bookid"
									],
									"variable": [
										{
											"key": "bookid",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "230"
								},
								{
									"key": "ETag",
									"value": "W/\"e6-tkL6rqjunBpON3wazFelNCW4pDU\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:33:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"infomediaries\",\n    \"author\": \"Mr. Raul Bogisich\",\n    \"isbn\": \"401-294-17\",\n    \"releaseDate\": \"2025-05-04T12:33:17.476Z\",\n    \"createdAt\": \"2025-05-04T12:33:17.489Z\",\n    \"updatedAt\": \"2025-05-04T12:33:17.489Z\",\n    \"id\": 56\n}"
						}
					]
				},
				{
					"name": "1.4 Update Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.4] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.4] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [1.4] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.4] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.4] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[1.4] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [1.4] TC04 - Validate that response body is a valid JSON\r",
									"pm.test(\"[1.4] TC04 - Validate that response body is a valid JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// [1.4] TC05 - Validate presence of all required fields\r",
									"const jsonData = pm.response.json();\r",
									"const requiredFields = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"\r",
									"pm.test(\"[1.4] TC05 - Validate presence of all required fields\", function () {\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(jsonData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [1.4] TC06 - Validate field data types are correct\r",
									"pm.test(\"[1.4] TC06 - Validate field data types are correct\", function () {\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.author).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isbn).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.releaseDate).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [1.4] TC07 - Validate that ID is a positive integer\r",
									"pm.test(\"[1.4] TC07 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"// [1.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\r",
									"pm.test(\"[1.4] TC08 - Validate createdAt and updatedAt are valid ISO 8601 timestamps\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [1.4] TC09 - Validate that updatedAt is equal to or after createdAt\r",
									"pm.test(\"[1.4] TC09 - Validate that updatedAt is equal to or after createdAt\", function () {\r",
									"    const created = new Date(jsonData.createdAt);\r",
									"    const updated = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updated.getTime()).to.be.at.least(created.getTime());\r",
									"});\r",
									"\r",
									"// [1.4] TC10 - Validate that title, author, and isbn are not empty\r",
									"pm.test(\"[1.4] TC10 - Validate that title, author, and isbn are not empty\", function () {\r",
									"    pm.expect(jsonData.title).to.not.be.empty;\r",
									"    pm.expect(jsonData.author).to.not.be.empty;\r",
									"    pm.expect(jsonData.isbn).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC11 - Validate that releaseDate is not a future date\", function () {\r",
									"    const release = new Date(jsonData.releaseDate);\r",
									"    const now = new Date();\r",
									"    pm.expect(release.getTime()).to.be.below(now.getTime());\r",
									"});\r",
									"\r",
									"// Use only in POST requests\r",
									"pm.test(\"[1.4] TC12 - Validate that ID is unique across requests\", function () {\r",
									"    let previousId = pm.collectionVariables.get(\"previous_id\");\r",
									"    if (previousId && pm.request.method === \"POST\") {\r",
									"        pm.expect(jsonData.id).to.not.eql(Number(previousId));\r",
									"    }\r",
									"    pm.collectionVariables.set(\"previous_id\", jsonData.id);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.4] TC13 - Validate no extra fields are present\", function () {\r",
									"    const actualKeys = Object.keys(jsonData);\r",
									"    const expectedKeys = [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"];\r",
									"    pm.expect(actualKeys).to.have.members(expectedKeys);\r",
									"    pm.expect(actualKeys.length).to.eql(expectedKeys.length);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.4] TC14 - Validate that updatedAt is greater than or equal to createdAt\", function () {\r",
									"    const created = new Date(jsonData.createdAt);\r",
									"    const updated = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updated.getTime()).to.be.at.least(created.getTime());\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"],\r",
									"    \"properties\": {\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"author\": { \"type\": \"string\" },\r",
									"        \"isbn\": { \"type\": \"string\" },\r",
									"        \"releaseDate\": { \"type\": \"string\" },\r",
									"        \"createdAt\": { \"type\": \"string\" },\r",
									"        \"updatedAt\": { \"type\": \"string\" },\r",
									"        \"id\": { \"type\": \"number\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"[1.4] TC15 - Validate response against JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"BookID\",pm.response.json().id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{$randomWord}}\",\n    \"author\": \"{{$randomFullName}}\",\n    \"isbn\": \"{{$randomInt}}-{{$randomInt}}-{{$randomInt}}\",\n    \"releaseDate\": \"{{$isoTimestamp}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books/:bookid",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":bookid"
							],
							"variable": [
								{
									"key": "bookid",
									"value": "{{BookID}}"
								}
							]
						},
						"description": "### Update Book Details\n\n#### Description\n\nThis endpoint is used to update the details of a book by its ID.\n\n#### Request Body\n\n- title (string, required): The title of the book.\n    \n- author (string, required): The author of the book.\n    \n- isbn (string, required): The ISBN of the book.\n    \n- releaseDate (string, required): The release date of the book.\n    \n\n#### Response Body (JSON Schema)\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\"type\": \"string\"},\n    \"author\": {\"type\": \"string\"},\n    \"isbn\": {\"type\": \"string\"},\n    \"releaseDate\": {\"type\": \"string\"},\n    \"createdAt\": {\"type\": \"string\"},\n    \"updatedAt\": {\"type\": \"string\"},\n    \"id\": {\"type\": \"integer\"}\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.4 Update Book",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Clothing\",\n    \"author\": \"Erick Baumbach\",\n    \"isbn\": \"682-491-124\",\n    \"releaseDate\": \"2025-05-04T20:02:02.459Z\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/books/:bookid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										":bookid"
									],
									"variable": [
										{
											"key": "bookid",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "219"
								},
								{
									"key": "ETag",
									"value": "W/\"db-ZJ6T0AHn2z9h/U7ZBPChfR1+/cE\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:33:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"scalable\",\n    \"author\": \"Vicky Stamm\",\n    \"isbn\": \"700-837-98\",\n    \"releaseDate\": \"2025-05-04T12:33:39.320Z\",\n    \"createdAt\": \"2025-05-04T12:33:17.489Z\",\n    \"updatedAt\": \"2025-05-04T12:33:39.346Z\",\n    \"id\": 56\n}"
						}
					]
				},
				{
					"name": "1.5 Delete Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [1.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[1.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [1.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[1.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [1.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[1.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [1.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[1.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}books/:bookid",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":bookid"
							],
							"variable": [
								{
									"key": "bookid",
									"value": "{{BookID}}"
								}
							]
						},
						"description": "### Delete Book\n\nDeletes a book by its ID.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nThis request returns a success status code if the book is deleted successfully."
					},
					"response": [
						{
							"name": "1.5 Delete Book",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books/:bookid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										":bookid"
									],
									"variable": [
										{
											"key": "bookid",
											"value": ""
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:33:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "### 📌 **Purpose**:\n\nThis folder represents the main resource for storing book information in the system. It acts as a central reference used in users’ wishlists and for display or management purposes.\n\n### 📦 **Data Structure**:\n\nEach `book` object typically contains:\n\n- `id` (number): Unique identifier.\n    \n- `title` (string): Book title.\n    \n- `author` (string): Author’s full name.\n    \n- `isbn` (string): Book's International Standard Book Number.\n    \n- `releaseDate` (string | ISO format): Date the book was released.\n    \n- `createdAt` / `updatedAt`: Timestamps for audit.\n    \n\n### 🔗 **Relationships**:\n\n- Linked in `wishlists.books[]` via ID references.\n    \n- Not directly associated with users or households but appears through wishlists.\n    \n\n### ⚙️ **Special Notes**:\n\n- Books are referenced by ID, not embedded.\n    \n- Must be created before they can be added to wishlists."
		},
		{
			"name": "2- Households",
			"item": [
				{
					"name": "2.1 Get All Households",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.1] TC02 - Validate that response time is under 1000ms\r",
									"pm.test(\"[2.1] TC02 - Validate that response time is under 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// [2.1] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.1] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.1] TC04 - Validate that response body is a valid JSON array\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"[2.1] TC04 - Validate that response body is a valid JSON array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [2.1] TC05 - Validate each household has required fields\r",
									"pm.test(\"[2.1] TC05 - Validate each household has required fields\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        pm.expect(h).to.have.property(\"name\");\r",
									"        pm.expect(h).to.have.property(\"createdAt\");\r",
									"        pm.expect(h).to.have.property(\"updatedAt\");\r",
									"        pm.expect(h).to.have.property(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC06 - Validate field data types for each household\r",
									"pm.test(\"[2.1] TC06 - Validate field data types for each household\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        pm.expect(h.name).to.be.a(\"string\");\r",
									"        pm.expect(h.createdAt).to.be.a(\"string\");\r",
									"        pm.expect(h.updatedAt).to.be.a(\"string\");\r",
									"        pm.expect(h.id).to.be.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC07 - Validate createdAt and updatedAt are ISO 8601 format\r",
									"pm.test(\"[2.1] TC07 - Validate createdAt and updatedAt are ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    jsonData.forEach(h => {\r",
									"        pm.expect(h.createdAt).to.match(isoRegex);\r",
									"        pm.expect(h.updatedAt).to.match(isoRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC08 - Validate that all household IDs are unique\r",
									"pm.test(\"[2.1] TC08 - Validate that all household IDs are unique\", function () {\r",
									"    const ids = jsonData.map(h => h.id);\r",
									"    const uniqueIds = [...new Set(ids)];\r",
									"    pm.expect(ids.length).to.eql(uniqueIds.length);\r",
									"});\r",
									"\r",
									"// [2.1] TC09 - Validate that createdAt equals updatedAt on new entries\r",
									"pm.test(\"[2.1] TC09 - Validate createdAt and updatedAt match on new entries\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        if (h.createdAt && h.updatedAt) {\r",
									"            pm.expect(h.createdAt).to.eql(h.updatedAt);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"// [2.1] TC10 - Validate optional links array structure\r",
									"pm.test(\"[2.1] TC10 - Validate optional 'links' array structure\", function () {\r",
									"    jsonData.forEach(h => {\r",
									"        if (h.links) {\r",
									"            pm.expect(h.links).to.be.an(\"array\");\r",
									"            h.links.forEach(link => {\r",
									"                pm.expect(link).to.have.property(\"rel\");\r",
									"                pm.expect(link).to.have.property(\"href\");\r",
									"                pm.expect(link.rel).to.be.a(\"string\");\r",
									"                pm.expect(link.href).to.be.a(\"string\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households",
							"host": [
								"{{baseURL}}households"
							]
						},
						"description": "### Retrieve all households\n\n#### Request\n\nThis is a `GET` request to the endpoint `{{baseURL}}households` to retrieve all households.\n\n#### Response\n\nThe response for this request is a JSON array containing household objects. Each household object has the following properties:\n\n- `name` (string): The name of the household.\n    \n- `createdAt` (string): The timestamp when the household was created.\n    \n- `updatedAt` (string): The timestamp when the household was last updated.\n    \n- `id` (number): The unique identifier for the household.\n    \n- `links` (array): An array of link objects containing `rel` (string) and `href` (string) properties.\n    \n\n#### JSON Schema\n\n``` json\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"createdAt\": { \"type\": \"string\" },\n      \"updatedAt\": { \"type\": \"string\" },\n      \"id\": { \"type\": \"number\" },\n      \"links\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"rel\": { \"type\": \"string\" },\n            \"href\": { \"type\": \"string\" }\n          }\n        }\n      }\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.1 Get All Households",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"15aa-md8lttXAm1VHRO+wTcipiLa7G4E\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:34:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T21:33:28.552Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.552Z\",\n        \"id\": 2,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/2\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T21:34:19.926Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.926Z\",\n        \"id\": 3,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/3\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T18:49:47.360Z\",\n        \"updatedAt\": \"2021-06-27T18:49:47.360Z\",\n        \"id\": 4,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/4\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T18:50:08.649Z\",\n        \"updatedAt\": \"2021-06-27T18:50:08.649Z\",\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/5\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T19:02:34.438Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.438Z\",\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/6\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:24:17.906Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.906Z\",\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/7\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:25:54.956Z\",\n        \"updatedAt\": \"2021-06-29T23:25:54.956Z\",\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/8\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:27:22.503Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.503Z\",\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/9\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:27:49.847Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.847Z\",\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/10\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:28:08.408Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.408Z\",\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/11\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:28:17.226Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.226Z\",\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/12\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:29:10.920Z\",\n        \"updatedAt\": \"2021-06-29T23:29:10.920Z\",\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/13\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:31:02.870Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.870Z\",\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/14\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:31:11.762Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.762Z\",\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/15\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:32:12.201Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.201Z\",\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/16\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-30T00:23:07.225Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.225Z\",\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/17\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-07-10T23:52:56.361Z\",\n        \"updatedAt\": \"2021-07-10T23:52:56.361Z\",\n        \"id\": 18\n    },\n    {\n        \"name\": \"Smith Family\",\n        \"createdAt\": \"2025-05-04T09:35:18.829Z\",\n        \"updatedAt\": \"2025-05-04T09:35:18.829Z\",\n        \"id\": 19\n    },\n    {\n        \"name\": \"Norma Stamm\",\n        \"createdAt\": \"2025-05-04T10:26:22.362Z\",\n        \"updatedAt\": \"2025-05-04T10:26:22.362Z\",\n        \"id\": 20\n    },\n    {\n        \"name\": \"Al McClure\",\n        \"createdAt\": \"2025-05-04T10:28:13.252Z\",\n        \"updatedAt\": \"2025-05-04T10:28:13.252Z\",\n        \"id\": 21\n    },\n    {\n        \"name\": \"Miss Christine Boyer\",\n        \"createdAt\": \"2025-05-04T10:28:26.803Z\",\n        \"updatedAt\": \"2025-05-04T10:28:26.803Z\",\n        \"id\": 22\n    },\n    {\n        \"name\": \"Dean Hauck\",\n        \"createdAt\": \"2025-05-04T11:23:57.493Z\",\n        \"updatedAt\": \"2025-05-04T11:23:57.493Z\",\n        \"id\": 23\n    },\n    {\n        \"name\": \"Juan Kunze\",\n        \"createdAt\": \"2025-05-04T11:58:13.006Z\",\n        \"updatedAt\": \"2025-05-04T11:58:13.006Z\",\n        \"id\": 24\n    },\n    {\n        \"name\": \"Ben Heidenreich\",\n        \"createdAt\": \"2025-05-04T12:34:01.455Z\",\n        \"updatedAt\": \"2025-05-04T12:34:01.455Z\",\n        \"id\": 25\n    },\n    {\n        \"name\": \"Dr. Drew Thompson\",\n        \"createdAt\": \"2025-05-04T12:34:08.180Z\",\n        \"updatedAt\": \"2025-05-04T12:34:08.180Z\",\n        \"id\": 26\n    },\n    {\n        \"name\": \"Alexandra Huels\",\n        \"createdAt\": \"2025-05-04T12:34:10.909Z\",\n        \"updatedAt\": \"2025-05-04T12:34:10.909Z\",\n        \"id\": 27\n    }\n]"
						}
					]
				},
				{
					"name": "2.2 Create New Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.2] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.2] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.2] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.2] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.2] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.2] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.2] TC04 - Validate response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[2.2] TC04 - Validate response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [2.2] TC05 - Validate response contains expected fields\r",
									"pm.test(\"[2.2] TC05 - Validate response contains expected fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [2.2] TC06 - Validate field data types\r",
									"pm.test(\"[2.2] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.2] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[2.2] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.2] TC08 - Validate createdAt and updatedAt match on creation\r",
									"pm.test(\"[2.2] TC08 - Validate createdAt and updatedAt match on creation\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [2.2] TC09 - Validate name is not empty\r",
									"pm.test(\"[2.2] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [2.2] TC10 - Validate that ID is a positive integer\r",
									"pm.test(\"[2.2] TC10 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"HouseholdID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}households",
							"host": [
								"{{baseURL}}households"
							]
						},
						"description": "### Create a new household\n\n#### Request Body\n\n- { \"name\": \"{{$randomFullName}}\"}\n    \n\n#### Response\n\n- `name` (string) - The name of the household.\n    \n- `createdAt` (string) - The timestamp when the household was created.\n    \n- `updatedAt` (string) - The timestamp when the household was last updated.\n    \n- `id` (number) - The unique identifier of the household."
					},
					"response": [
						{
							"name": "2.3 Create New Household",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Jaime Smitham\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/households",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "129"
								},
								{
									"key": "ETag",
									"value": "W/\"81-6wT4/0N7FQjTPbaztMoy11ZITmA\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:34:01 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Ben Heidenreich\",\n    \"createdAt\": \"2025-05-04T12:34:01.455Z\",\n    \"updatedAt\": \"2025-05-04T12:34:01.455Z\",\n    \"id\": 25\n}"
						}
					]
				},
				{
					"name": "2.3 Get Household By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.3] TC04 - Validate that response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[2.3] TC04 - Validate that response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [2.3] TC05 - Validate that required fields are present\r",
									"pm.test(\"[2.3] TC05 - Validate that required fields are present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [2.3] TC06 - Validate field data types\r",
									"pm.test(\"[2.3] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.3] TC07 - Validate ISO 8601 format for createdAt and updatedAt\r",
									"pm.test(\"[2.3] TC07 - Validate ISO 8601 format for createdAt and updatedAt\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.3] TC08 - Validate createdAt and updatedAt are equal on fetch\r",
									"pm.test(\"[2.3] TC08 - Validate createdAt and updatedAt are equal on fetch\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [2.3] TC09 - Validate name is not empty\r",
									"pm.test(\"[2.3] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [2.3] TC10 - Validate id is a positive integer\r",
									"pm.test(\"[2.3] TC10 - Validate id is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:housdeholdid",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":housdeholdid"
							],
							"variable": [
								{
									"key": "housdeholdid",
									"value": "{{HouseholdID}}"
								}
							]
						},
						"description": "### Retrieve Household by ID\n\nThis endpoint makes an HTTP GET request to retrieve a household by its ID.\n\n#### Request\n\n- URL: `{{baseURL}}households/:housdeholdid`\n    \n- Method: `GET`\n    \n\n#### Response\n\nThe response will include the following fields:\n\n- `name` (string): The name of the household.\n    \n- `createdAt` (string): The timestamp when the household was created.\n    \n- `updatedAt` (string): The timestamp when the household was last updated.\n    \n- `id` (integer): The unique identifier of the household."
					},
					"response": [
						{
							"name": "2.2 Get Household By ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households/:housdeholdid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										":housdeholdid"
									],
									"variable": [
										{
											"key": "housdeholdid",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "128"
								},
								{
									"key": "ETag",
									"value": "W/\"80-SE1UrlIQm0EIDsNEtpVw35JgNSU\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:34:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Alberto Hessel\",\n    \"createdAt\": \"2025-05-04T12:34:10.909Z\",\n    \"updatedAt\": \"2025-05-04T12:34:55.074Z\",\n    \"id\": 27\n}"
						}
					]
				},
				{
					"name": "2.4 Update Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [2.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[2.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [2.3] TC04 - Validate response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[2.3] TC04 - Validate response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [2.3] TC05 - Validate response contains expected fields\r",
									"pm.test(\"[2.3] TC05 - Validate response contains expected fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [2.3] TC06 - Validate field data types\r",
									"pm.test(\"[2.3] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [2.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[2.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [2.3] TC08 - Validate that updatedAt is greater than or equal to createdAt\r",
									"pm.test(\"[2.3] TC08 - Validate that updatedAt is greater than or equal to createdAt\", function () {\r",
									"    const createdAt = new Date(jsonData.createdAt);\r",
									"    const updatedAt = new Date(jsonData.updatedAt);\r",
									"    pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
									"});\r",
									"\r",
									"\r",
									"// [2.3] TC09 - Validate name is not empty\r",
									"pm.test(\"[2.3] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [2.3] TC10 - Validate that ID is a positive integer\r",
									"pm.test(\"[2.3] TC10 - Validate that ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"HouseholdID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}households/:housdeholdid",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":housdeholdid"
							],
							"variable": [
								{
									"key": "housdeholdid",
									"value": "{{HouseholdID}}"
								}
							]
						},
						"description": "### Update Household\n\n#### Request Body\n\n- Type: JSON\n    \n- Description: Payload to update the household with the new name.\n    \n\n``` json\n{\n    \"name\": \"{{$randomFullName}}\"\n}\n\n ```\n\n#### Response\n\nThe response for this request can have the following properties:\n\n``` json\n{\n    \"name\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"id\": 0\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.4 Update Household",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Norma Veum\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/households/:housdeholdid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										":housdeholdid"
									],
									"variable": [
										{
											"key": "housdeholdid",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "124"
								},
								{
									"key": "ETag",
									"value": "W/\"7c-SeKcwmm1zk3i/L1iqO+NuRnEMos\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:34:46 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Cindy Beer\",\n    \"createdAt\": \"2025-05-04T12:34:10.909Z\",\n    \"updatedAt\": \"2025-05-04T12:34:46.179Z\",\n    \"id\": 27\n}"
						}
					]
				},
				{
					"name": "2.5 Delete Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [2.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[2.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [2.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[2.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:housdeholdid",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":housdeholdid"
							],
							"variable": [
								{
									"key": "housdeholdid",
									"value": "{{HouseholdID}}"
								}
							]
						},
						"description": "### Delete Household\n\nDeletes a household by its ID.\n\n#### HTTP Request\n\nDELETE {{baseURL}}/households/:householdid\n\n#### Response\n\nThe response for this request is a JSON schema."
					},
					"response": [
						{
							"name": "2.5 Delete Household",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households/:housdeholdid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										":housdeholdid"
									],
									"variable": [
										{
											"key": "housdeholdid",
											"value": ""
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:35:20 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "### 📌 **Purpose**:\n\nThe `households` folder groups users under shared family or organizational units. It's useful for filtering or aggregating data (like total wishlist books per household).\n\n### 📦 **Data Structure**:\n\nEach household contains:\n\n- `id` (number): Unique identifier.\n    \n- `name` (string): The name of the household.\n    \n- `createdAt`, `updatedAt`: Timestamps.\n    \n- `links`: Contains a self-link to fetch detailed info.\n    \n\n### 🔗 **Relationships**:\n\n- A `user.householdId` points to a household.\n    \n- Used in grouped analytics like \"wishlist books per household.\"\n    \n\n### ⚙️ **Special Notes**:\n\n- Deleting a household does not automatically delete its users.\n    \n- Aggregation endpoints (e.g., `/households/:id/wishlistBooks`) compute derived data."
		},
		{
			"name": "3- Users",
			"item": [
				{
					"name": "3.1 Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.1] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.1] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.1] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.1] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.1] TC04 - Validate that response is an array\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.1] TC04 - Validate that response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [3.1] TC05 - Validate required fields exist in first user\r",
									"pm.test(\"[3.1] TC05 - Validate required fields exist in first user\", function () {\r",
									"    const user = jsonData[0];\r",
									"    pm.expect(user).to.have.property(\"id\");\r",
									"    pm.expect(user).to.have.property(\"firstName\");\r",
									"    pm.expect(user).to.have.property(\"lastName\");\r",
									"    pm.expect(user).to.have.property(\"email\");\r",
									"    pm.expect(user).to.have.property(\"createdAt\");\r",
									"    pm.expect(user).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.1] TC06 - Validate field data types in first user\r",
									"pm.test(\"[3.1] TC06 - Validate field data types in first user\", function () {\r",
									"    const user = jsonData[0];\r",
									"    pm.expect(user.id).to.be.a(\"number\");\r",
									"    pm.expect(user.firstName).to.be.a(\"string\");\r",
									"    pm.expect(user.lastName).to.be.a(\"string\");\r",
									"    pm.expect(user.email).to.be.a(\"string\");\r",
									"    pm.expect(user.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(user.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.1] TC07 - Validate ISO 8601 format for createdAt and updatedAt in first user\r",
									"pm.test(\"[3.1] TC07 - Validate ISO 8601 format for createdAt and updatedAt\", function () {\r",
									"    const user = jsonData[0];\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(user.createdAt).to.match(isoRegex);\r",
									"    pm.expect(user.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.1] TC08 - Validate createdAt and updatedAt match in first user\r",
									"pm.test(\"[3.1] TC08 - Validate createdAt and updatedAt match in first user\", function () {\r",
									"    const user = jsonData[0];\r",
									"    pm.expect(user.createdAt).to.eql(user.updatedAt);\r",
									"});\r",
									"\r",
									"// [3.1] TC09 - Validate second user exists\r",
									"pm.test(\"[3.1] TC09 - Validate second user exists\", function () {\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(1);\r",
									"});\r",
									"\r",
									"// [3.1] TC10 - Validate first two users have different IDs\r",
									"pm.test(\"[3.1] TC10 - Validate first two users have different IDs\", function () {\r",
									"    const user1 = jsonData[0];\r",
									"    const user2 = jsonData[1];\r",
									"    pm.expect(user1.id).to.not.eql(user2.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users",
							"host": [
								"{{baseURL}}users"
							]
						},
						"description": "### Retrieve All Users\n\nThis endpoint makes an HTTP GET request to retrieve all users.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response Body\n\nThe response will contain an array of user objects, where each user object includes the following fields:\n\n- `email` (string): The email address of the user.\n    \n- `firstName` (string): The first name of the user.\n    \n- `lastName` (string): The last name of the user.\n    \n- `householdId` (integer): The ID of the household to which the user belongs.\n    \n- `createdAt` (string): The timestamp indicating when the user was created.\n    \n- `updatedAt` (string): The timestamp indicating when the user was last updated.\n    \n- `wishlistId` (integer): The ID of the user's wishlist.\n    \n- `id` (integer): The unique ID of the user.\n    \n- `links` (array): An array of objects containing links related to the user, where each object includes the following fields:\n    \n    - `rel` (string): The relationship of the link.\n        \n    - `href` (string): The URL of the link.\n        \n\nAn example response body for this request is:\n\n``` json\n[\n    {\n        \"email\": \"\",\n        \"firstName\": \"\",\n        \"lastName\": \"\",\n        \"householdId\": 0,\n        \"createdAt\": \"\",\n        \"updatedAt\": \"\",\n        \"wishlistId\": 0,\n        \"id\": 0,\n        \"links\": [\n            {\n                \"rel\": \"\",\n                \"href\": \"\"\n            }\n        ]\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "3.1 Get All Users",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}users",
									"host": [
										"{{baseURL}}users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"3328-0hO8PVLfumJiXoMtJQY4/pGfsMM\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:35:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"email\": \"chip+taylonr@gmail.com\",\n        \"firstName\": \"Chocolate Chip\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T20:53:02.478Z\",\n        \"updatedAt\": \"2021-06-26T20:53:02.478Z\",\n        \"wishlistId\": 2,\n        \"id\": 2,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/2\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:33:28.578Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.578Z\",\n        \"wishlistId\": 3,\n        \"id\": 3,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/3\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:33:28.596Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.596Z\",\n        \"wishlistId\": 4,\n        \"id\": 4,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/4\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:34:19.949Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.949Z\",\n        \"wishlistId\": 5,\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/5\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:34:19.966Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.966Z\",\n        \"wishlistId\": 6,\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/6\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:02:34.474Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.474Z\",\n        \"wishlistId\": 7,\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/7\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:02:34.504Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.504Z\",\n        \"wishlistId\": 8,\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/8\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:25:05.658Z\",\n        \"updatedAt\": \"2021-06-27T19:25:05.658Z\",\n        \"wishlistId\": 9,\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/9\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:27:15.137Z\",\n        \"updatedAt\": \"2021-06-27T19:27:15.137Z\",\n        \"wishlistId\": 10,\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/10\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 7,\n        \"createdAt\": \"2021-06-29T23:24:17.944Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.944Z\",\n        \"wishlistId\": 11,\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/11\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 7,\n        \"createdAt\": \"2021-06-29T23:24:17.979Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.979Z\",\n        \"wishlistId\": 12,\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/12\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 8,\n        \"createdAt\": \"2021-06-29T23:25:54.991Z\",\n        \"updatedAt\": \"2021-06-29T23:25:54.991Z\",\n        \"wishlistId\": 13,\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/13\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 8,\n        \"createdAt\": \"2021-06-29T23:25:55.024Z\",\n        \"updatedAt\": \"2021-06-29T23:25:55.024Z\",\n        \"wishlistId\": 14,\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/14\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 9,\n        \"createdAt\": \"2021-06-29T23:27:22.541Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.541Z\",\n        \"wishlistId\": 15,\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/15\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 9,\n        \"createdAt\": \"2021-06-29T23:27:22.576Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.576Z\",\n        \"wishlistId\": 16,\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/16\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 10,\n        \"createdAt\": \"2021-06-29T23:27:49.888Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.888Z\",\n        \"wishlistId\": 17,\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/17\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 10,\n        \"createdAt\": \"2021-06-29T23:27:49.921Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.921Z\",\n        \"wishlistId\": 18,\n        \"id\": 18,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/18\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 11,\n        \"createdAt\": \"2021-06-29T23:28:08.460Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.460Z\",\n        \"wishlistId\": 19,\n        \"id\": 19,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/19\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 11,\n        \"createdAt\": \"2021-06-29T23:28:08.492Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.492Z\",\n        \"wishlistId\": 20,\n        \"id\": 20,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/20\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 12,\n        \"createdAt\": \"2021-06-29T23:28:17.267Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.267Z\",\n        \"wishlistId\": 21,\n        \"id\": 21,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/21\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 12,\n        \"createdAt\": \"2021-06-29T23:28:17.301Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.301Z\",\n        \"wishlistId\": 22,\n        \"id\": 22,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/22\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 13,\n        \"createdAt\": \"2021-06-29T23:29:10.970Z\",\n        \"updatedAt\": \"2021-06-29T23:29:10.970Z\",\n        \"wishlistId\": 23,\n        \"id\": 23,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/23\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 13,\n        \"createdAt\": \"2021-06-29T23:29:11.012Z\",\n        \"updatedAt\": \"2021-06-29T23:29:11.012Z\",\n        \"wishlistId\": 24,\n        \"id\": 24,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/24\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 14,\n        \"createdAt\": \"2021-06-29T23:31:02.913Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.913Z\",\n        \"wishlistId\": 25,\n        \"id\": 25,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/25\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 14,\n        \"createdAt\": \"2021-06-29T23:31:02.955Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.955Z\",\n        \"wishlistId\": 26,\n        \"id\": 26,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/26\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 15,\n        \"createdAt\": \"2021-06-29T23:31:11.806Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.806Z\",\n        \"wishlistId\": 27,\n        \"id\": 27,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/27\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 15,\n        \"createdAt\": \"2021-06-29T23:31:11.842Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.842Z\",\n        \"wishlistId\": 28,\n        \"id\": 28,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/28\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 16,\n        \"createdAt\": \"2021-06-29T23:32:12.241Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.241Z\",\n        \"wishlistId\": 29,\n        \"id\": 29,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/29\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 16,\n        \"createdAt\": \"2021-06-29T23:32:12.282Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.282Z\",\n        \"wishlistId\": 30,\n        \"id\": 30,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/30\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 17,\n        \"createdAt\": \"2021-06-30T00:23:07.314Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.314Z\",\n        \"wishlistId\": 31,\n        \"id\": 31,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/31\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 17,\n        \"createdAt\": \"2021-06-30T00:23:07.407Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.407Z\",\n        \"wishlistId\": 32,\n        \"id\": 32,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/32\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-06-30T01:21:35.350Z\",\n        \"updatedAt\": \"2021-06-30T01:21:35.350Z\",\n        \"wishlistId\": 33,\n        \"id\": 33,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/33\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-06-30T01:23:19.443Z\",\n        \"updatedAt\": \"2021-06-30T01:23:19.443Z\",\n        \"wishlistId\": 34,\n        \"id\": 34,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/34\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-07-01T22:25:45.718Z\",\n        \"updatedAt\": \"2021-07-01T22:25:45.792Z\",\n        \"wishlistId\": 35,\n        \"id\": 35,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/35\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-07-01T22:31:49.175Z\",\n        \"updatedAt\": \"2021-07-01T22:31:49.175Z\",\n        \"wishlistId\": 36,\n        \"id\": 36,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/36\"\n            }\n        ]\n    },\n    {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"createdAt\": \"2025-05-04T09:39:47.405Z\",\n        \"updatedAt\": \"2025-05-04T09:39:47.405Z\",\n        \"id\": 37\n    },\n    {\n        \"firstName\": \"Gregory\",\n        \"lastName\": \"Schumm\",\n        \"email\": \"Garrett.McClure18@gmail.com\",\n        \"createdAt\": \"2025-05-04T10:44:22.499Z\",\n        \"updatedAt\": \"2025-05-04T10:44:22.499Z\",\n        \"id\": 38\n    },\n    {\n        \"firstName\": \"Javonte\",\n        \"lastName\": \"Conroy\",\n        \"email\": \"Florence.Kunze53@gmail.com\",\n        \"createdAt\": \"2025-05-04T10:46:09.430Z\",\n        \"updatedAt\": \"2025-05-04T10:46:09.430Z\",\n        \"id\": 39\n    },\n    {\n        \"firstName\": \"Bernard\",\n        \"lastName\": \"Nicolas\",\n        \"email\": \"Ernesto.Adams99@yahoo.com\",\n        \"createdAt\": \"2025-05-04T10:51:39.210Z\",\n        \"updatedAt\": \"2025-05-04T10:51:39.210Z\",\n        \"id\": 40\n    }\n]"
						}
					]
				},
				{
					"name": "3.2 Create New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.2] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.2] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.2] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.2] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.2] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.2] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.2] TC04 - Validate required fields exist\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.2] TC04 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.2] TC05 - Validate field data types\r",
									"pm.test(\"[3.2] TC05 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.2] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[3.2] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.2] TC07 - Validate createdAt and updatedAt match\r",
									"pm.test(\"[3.2] TC07 - Validate createdAt and updatedAt match\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [3.2] TC08 - Validate firstName, lastName, email are not empty\r",
									"pm.test(\"[3.2] TC08 - Validate firstName, lastName, email are not empty\", function () {\r",
									"    pm.expect(jsonData.firstName).to.not.be.empty;\r",
									"    pm.expect(jsonData.lastName).to.not.be.empty;\r",
									"    pm.expect(jsonData.email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [3.2] TC09 - Validate ID is a positive integer\r",
									"pm.test(\"[3.2] TC09 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"UserID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users",
							"host": [
								"{{baseURL}}users"
							]
						},
						"description": "### Create a new user\n\n#### Request Body\n\n- {\"firstName\": \"{{$randomFirstName}}\",\"lastName\": \"{{$randomLastName}}\",\"email\": \"{{$randomEmail}}\"}\n    \n\n#### Response Body\n\n- {\"firstName\": \"\",\"lastName\": \"\",\"email\": \"\",\"createdAt\": \"\",\"updatedAt\": \"\",\"id\": 0}\n    \n\n#### Response JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\"type\": \"string\"},\n    \"lastName\": {\"type\": \"string\"},\n    \"email\": {\"type\": \"string\"},\n    \"createdAt\": {\"type\": \"string\"},\n    \"updatedAt\": {\"type\": \"string\"},\n    \"id\": {\"type\": \"integer\"}\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.3 Create New User",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}users",
									"host": [
										"{{baseURL}}users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "178"
								},
								{
									"key": "ETag",
									"value": "W/\"b2-cKDBAOgam5ywzNAyhb+MJ2O6GTg\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:35:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Eloy\",\n    \"lastName\": \"Hane\",\n    \"email\": \"Taylor41@yahoo.com\",\n    \"createdAt\": \"2025-05-04T12:35:52.832Z\",\n    \"updatedAt\": \"2025-05-04T12:35:52.832Z\",\n    \"id\": 41\n}"
						}
					]
				},
				{
					"name": "3.3 Get User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.3] TC04 - Validate that response body is a valid JSON object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.3] TC04 - Validate that response body is a valid JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [3.3] TC05 - Validate required fields exist\r",
									"pm.test(\"[3.3] TC05 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.3] TC06 - Validate data types of fields\r",
									"pm.test(\"[3.3] TC06 - Validate data types of fields\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[3.3] TC07 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.3] TC08 - Validate createdAt and updatedAt match on fetch\r",
									"pm.test(\"[3.3] TC08 - Validate createdAt and updatedAt match on fetch\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [3.3] TC09 - Validate firstName, lastName, and email are not empty\r",
									"pm.test(\"[3.3] TC09 - Validate firstName, lastName, and email are not empty\", function () {\r",
									"    pm.expect(jsonData.firstName).to.not.be.empty;\r",
									"    pm.expect(jsonData.lastName).to.not.be.empty;\r",
									"    pm.expect(jsonData.email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [3.3] TC10 - Validate ID is a positive integer\r",
									"pm.test(\"[3.3] TC10 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users/:UserID",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":UserID"
							],
							"variable": [
								{
									"key": "UserID",
									"value": "{{UserID}}"
								}
							]
						},
						"description": "### Retrieve User by ID\n\nThis endpoint retrieves a user by its ID.\n\n#### Response\n\nThe response for this request can be documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"integer\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.2 Get User By ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}users/:UserID",
									"host": [
										"{{baseURL}}users"
									],
									"path": [
										":UserID"
									],
									"variable": [
										{
											"key": "UserID",
											"value": "{{UserID}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "189"
								},
								{
									"key": "ETag",
									"value": "W/\"bd-Vt5YelzP5ke5KB9Fuo6HzCf1M9Y\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:36:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Chyna\",\n    \"lastName\": \"Corwin\",\n    \"email\": \"Gladys.Collier16@yahoo.com\",\n    \"createdAt\": \"2025-05-04T12:36:02.635Z\",\n    \"updatedAt\": \"2025-05-04T12:36:02.635Z\",\n    \"id\": 42\n}"
						}
					]
				},
				{
					"name": "3.4 Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [3.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[3.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [3.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[3.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [3.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[3.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [3.3] TC04 - Validate required fields exist\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[3.3] TC04 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"// [3.3] TC05 - Validate field data types\r",
									"pm.test(\"[3.3] TC05 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// [3.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[3.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [3.3] TC07 - Validate firstName, lastName, email are not empty\r",
									"pm.test(\"[3.4] TC07 - Validate firstName, lastName, and email are not empty\", function () {\r",
									"    pm.expect(jsonData.firstName).to.not.be.empty;\r",
									"    pm.expect(jsonData.lastName).to.not.be.empty;\r",
									"    pm.expect(jsonData.email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [3.3] TC08 - Validate ID is a positive integer\r",
									"pm.test(\"[3.3] TC08 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"UserID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users/:UserID",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":UserID"
							],
							"variable": [
								{
									"key": "UserID",
									"value": "{{UserID}}"
								}
							]
						},
						"description": "### Update User Details\n\nThe `PUT` request is used to update a user by specifying the `UserID` in the endpoint URL.\n\n#### Request Body\n\nThe request body should be in raw format and should include the following parameters:\n\n- `firstName` (string): The first name of the user.\n    \n- `lastName` (string): The last name of the user.\n    \n- `email` (string): The email address of the user.\n    \n\n#### Example Request\n\n```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johndoe@example.com\"\n}\n\n ```\n\n#### Response (JSON Schema)\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\"type\": \"string\"},\n    \"lastName\": {\"type\": \"string\"},\n    \"email\": {\"type\": \"string\"},\n    \"createdAt\": {\"type\": \"string\"},\n    \"updatedAt\": {\"type\": \"string\"},\n    \"id\": {\"type\": \"integer\"}\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.4 Update User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}users/:UserID",
									"host": [
										"{{baseURL}}users"
									],
									"path": [
										":UserID"
									],
									"variable": [
										{
											"key": "UserID",
											"value": "{{UserID}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "187"
								},
								{
									"key": "ETag",
									"value": "W/\"bb-ScnmpagrtXVfqOPxyk4vyvT8TyM\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:36:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Elva\",\n    \"lastName\": \"Cremin\",\n    \"email\": \"Karson_Brakus30@yahoo.com\",\n    \"createdAt\": \"2025-05-04T12:36:02.635Z\",\n    \"updatedAt\": \"2025-05-04T12:36:26.948Z\",\n    \"id\": 42\n}"
						}
					]
				},
				{
					"name": "3.5 Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [2.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[2.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [2.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[2.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users/:UserID",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":UserID"
							],
							"variable": [
								{
									"key": "UserID",
									"value": "{{UserID}}"
								}
							]
						},
						"description": "### Delete User by ID\n\n#### Request\n\n- Method: DELETE\n    \n- Endpoint: `{{baseURL}}users/:UserID`\n    \n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nThe response for this request is a JSON schema with the following properties:\n\n- `message`: A string indicating the result of the deletion operation.\n    \n- `deletedUserID`: A string representing the ID of the deleted user.\n    \n\nExample response:\n\n``` json\n{\n    \"message\": \"User deleted successfully\",\n    \"deletedUserID\": \"12345\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.5 Delete User",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}users/:UserID",
									"host": [
										"{{baseURL}}users"
									],
									"path": [
										":UserID"
									],
									"variable": [
										{
											"key": "UserID",
											"value": "{{UserID}}"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:36:42 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "### 📌 **Purpose**:\n\nThe `users` folder holds all end-user profiles who can own wishlists and belong to households. Each user is a central actor in the system.\n\n### 📦 **Data Structure**:\n\nUser objects include:\n\n- `id`: Unique ID.\n    \n- `firstName`, `lastName`: User name fields.\n    \n- `email`: Email address (used as a key in some apps).\n    \n- `householdId`: ID reference to the `households` table.\n    \n- `wishlistId`: ID reference to a user's wishlist.\n    \n- `createdAt`, `updatedAt`: Metadata timestamps.\n    \n- `links`: Includes self-referencing link.\n    \n\n### 🔗 **Relationships**:\n\n- Belongs to one `household`.\n    \n- Owns one `wishlist`.\n    \n\n### ⚙️ **Special Notes**:\n\n- On creation, a new wishlist is also created and linked.\n    \n- Users may share a household but have unique wishlists."
		},
		{
			"name": "4- Wishlists",
			"item": [
				{
					"name": "4.1 Get All Wishlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.1] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.1] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.1] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.1] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.1] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.1] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.1] TC04 - Validate response is an array\r",
									"pm.test(\"[4.1] TC04 - Validate response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// [4.1] TC05 - Validate each wishlist object has required fields\r",
									"pm.test(\"[4.1] TC05 - Validate each wishlist object has required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"books\");\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC06 - Validate 'books' is an array\r",
									"pm.test(\"[4.1] TC06 - Validate 'books' is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.books).to.be.an(\"array\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC07 - Validate 'id' is a positive integer\r",
									"pm.test(\"[4.1] TC07 - Validate 'id' is a positive integer\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.id).to.be.above(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC08 - Validate 'name' is not empty\r",
									"pm.test(\"[4.1] TC08 - Validate 'name' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.name).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"// [4.1] TC09 - Validate optional timestamps if present\r",
									"pm.test(\"[4.1] TC09 - Validate optional timestamps if present\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    jsonData.forEach(item => {\r",
									"        if (item.createdAt) {\r",
									"            pm.expect(item.createdAt).to.match(isoRegex);\r",
									"        }\r",
									"        if (item.updatedAt) {\r",
									"            pm.expect(item.updatedAt).to.match(isoRegex);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists",
							"host": [
								"{{baseURL}}wishlists"
							]
						},
						"description": "### Retrieve All Wishlists\n\nThis endpoint makes an HTTP GET request to retrieve all wishlists.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nThe response will include an array of wishlists, where each wishlist object contains the following keys:\n\n- `name`: The name of the wishlist (string)\n    \n- `books`: An array of book IDs included in the wishlist\n    \n- `id`: The unique identifier of the wishlist (integer)\n    \n\nExample response:\n\n``` json\n[{\"name\":\"\",\"books\":[0],\"id\":0}]\n\n ```"
					},
					"response": [
						{
							"name": "4.1 Get All Wishlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}wishlists",
									"host": [
										"{{baseURL}}wishlists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"bea-beZmweu2xY+yCLhWHy0eqnE0aPE\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:37:01 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Chocolate Chip's List\",\n        \"books\": [\n            2\n        ],\n        \"id\": 2\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 3\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 4\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 5\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 6\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 7\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            2\n        ],\n        \"id\": 8\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 9\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 10\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [],\n        \"id\": 11\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 12\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 13\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 14\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 15\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 16\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 17\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            27\n        ],\n        \"id\": 18\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [\n            6\n        ],\n        \"id\": 19\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 20\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            10\n        ],\n        \"id\": 21\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 22\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [],\n        \"id\": 23\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            27\n        ],\n        \"id\": 24\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 25\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            9\n        ],\n        \"id\": 26\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 27\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 28\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            13,\n            25,\n            7\n        ],\n        \"id\": 29\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            13\n        ],\n        \"id\": 30\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            23,\n            5,\n            8\n        ],\n        \"id\": 31\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            16\n        ],\n        \"id\": 32\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 33\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 34\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 35\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 36\n    },\n    {\n        \"name\": \"Birthday Wishlist\",\n        \"books\": [],\n        \"createdAt\": \"2025-05-04T09:43:33.405Z\",\n        \"updatedAt\": \"2025-05-04T09:43:33.405Z\",\n        \"id\": 37\n    },\n    {\n        \"name\": \"Ms. Edward Strosin\",\n        \"books\": [],\n        \"createdAt\": \"2025-05-04T10:58:09.602Z\",\n        \"updatedAt\": \"2025-05-04T10:58:09.603Z\",\n        \"id\": 38\n    },\n    {\n        \"name\": \"Charlotte Hammes\",\n        \"books\": [],\n        \"createdAt\": \"2025-05-04T11:00:15.488Z\",\n        \"updatedAt\": \"2025-05-04T11:00:15.488Z\",\n        \"id\": 39\n    }\n]"
						}
					]
				},
				{
					"name": "4.2 Create New Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.3] TC04 - Validate required fields exist\r",
									"pm.test(\"[4.3] TC04 - Validate required fields exist\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"books\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [4.3] TC05 - Validate field data types\r",
									"pm.test(\"[4.3] TC05 - Validate field data types\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [4.3] TC07 - Validate createdAt and updatedAt match on creation\r",
									"pm.test(\"[4.3] TC07 - Validate createdAt and updatedAt match on creation\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [4.3] TC08 - Validate 'name' is not empty\r",
									"pm.test(\"[4.3] TC08 - Validate 'name' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [4.3] TC09 - Validate 'id' is a positive integer\r",
									"pm.test(\"[4.3] TC09 - Validate 'id' is a positive integer\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"WishlistID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"books\": []\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}wishlists",
							"host": [
								"{{baseURL}}wishlists"
							]
						},
						"description": "### Create New Wishlist\n\nThis endpoint is used to create a new wishlist.\n\n#### Request Body\n\n- Type: Raw\n    \n- Description: JSON payload with the following parameters:\n    \n    - `name` (string): The name of the wishlist.\n        \n    - `books` (array): An array of books in the wishlist.\n        \n\nExample:\n\n``` json\n{\n  \"name\": \"{{$randomFullName}}\",\n  \"books\": []\n}\n\n ```\n\n#### Response\n\n- `name` (string): The name of the wishlist.\n    \n- `books` (array): An array of books in the wishlist.\n    \n- `createdAt` (string): The timestamp of when the wishlist was created.\n    \n- `updatedAt` (string): The timestamp of when the wishlist was last updated.\n    \n- `id` (number): The unique identifier of the wishlist.\n    \n\nExample:\n\n``` json\n{\n  \"name\": \"\",\n  \"books\": [],\n  \"createdAt\": \"\",\n  \"updatedAt\": \"\",\n  \"id\": 0\n}\n\n ```"
					},
					"response": [
						{
							"name": "4.3 Create New Wishlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"books\": []\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}wishlists",
									"host": [
										"{{baseURL}}wishlists"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "144"
								},
								{
									"key": "ETag",
									"value": "W/\"90-Q9IuFC+SlZMyxS8wxGY5oAs7ShQ\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:37:11 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Kerry Rosenbaum\",\n    \"books\": [],\n    \"createdAt\": \"2025-05-04T12:37:11.728Z\",\n    \"updatedAt\": \"2025-05-04T12:37:11.728Z\",\n    \"id\": 40\n}"
						}
					]
				},
				{
					"name": "4.3 Get Wishlist By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.3] TC04 - Validate response is a valid object\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"[4.3] TC04 - Validate response is a valid object\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// [4.3] TC05 - Validate required fields exist\r",
									"pm.test(\"[4.3] TC05 - Validate required fields exist\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"books\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [4.3] TC06 - Validate field data types\r",
									"pm.test(\"[4.3] TC06 - Validate field data types\", function () {\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [4.3] TC07 - Validate createdAt and updatedAt follow ISO 8601 format\r",
									"pm.test(\"[4.3] TC07 - Validate createdAt and updatedAt follow ISO 8601 format\", function () {\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [4.3] TC08 - Validate createdAt and updatedAt are equal\r",
									"pm.test(\"[4.3] TC08 - Validate createdAt and updatedAt are equal\", function () {\r",
									"    pm.expect(jsonData.createdAt).to.eql(jsonData.updatedAt);\r",
									"});\r",
									"\r",
									"// [4.3] TC09 - Validate name is not empty\r",
									"pm.test(\"[4.3] TC09 - Validate name is not empty\", function () {\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [4.3] TC10 - Validate ID is a positive integer\r",
									"pm.test(\"[4.3] TC10 - Validate ID is a positive integer\", function () {\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:WishlistID",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":WishlistID"
							],
							"variable": [
								{
									"key": "WishlistID",
									"value": "{{WishlistID}}"
								}
							]
						},
						"description": "### Retrieve Wishlist by ID\n\nThis endpoint retrieves a wishlist based on its unique ID.\n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"books\": {\n            \"type\": \"array\"\n        },\n        \"createdAt\": {\n            \"type\": \"string\"\n        },\n        \"updatedAt\": {\n            \"type\": \"string\"\n        },\n        \"id\": {\n            \"type\": \"integer\"\n        }\n    }\n}\n\n ```"
					},
					"response": [
						{
							"name": "4.2 Get Wishlist By ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}wishlists/:WishlistID",
									"host": [
										"{{baseURL}}wishlists"
									],
									"path": [
										":WishlistID"
									],
									"variable": [
										{
											"key": "WishlistID",
											"value": "{{WishlistID}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "145"
								},
								{
									"key": "ETag",
									"value": "W/\"91-gx/LqCLDNfCoCcwSLYmG1n6J0BM\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 20:11:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Melanie Lang DVM\",\n    \"books\": [],\n    \"createdAt\": \"2025-05-04T20:11:34.147Z\",\n    \"updatedAt\": \"2025-05-04T20:11:34.147Z\",\n    \"id\": 41\n}"
						}
					]
				},
				{
					"name": "4.4 Update Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [4.3] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[4.3] TC01 - Validate that status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// [4.3] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[4.3] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [4.3] TC03 - Validate Content-Type header is application/json\r",
									"pm.test(\"[4.3] TC03 - Validate Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// [4.3] TC04 - Validate required fields exist\r",
									"pm.test(\"[4.3] TC04 - Validate required fields exist\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"books\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// [4.3] TC05 - Validate field data types\r",
									"pm.test(\"[4.3] TC05 - Validate field data types\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// [4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\r",
									"pm.test(\"[4.3] TC06 - Validate createdAt and updatedAt are in ISO 8601 format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const isoRegex = /^[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}.\\d{3}Z$/;\r",
									"    pm.expect(jsonData.createdAt).to.match(isoRegex);\r",
									"    pm.expect(jsonData.updatedAt).to.match(isoRegex);\r",
									"});\r",
									"\r",
									"// [4.3] TC07 - Validate 'name' is not empty\r",
									"pm.test(\"[4.3] TC07 - Validate 'name' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// [4.3] TC08 - Validate 'id' is a positive integer\r",
									"pm.test(\"[4.3] TC08 - Validate 'id' is a positive integer\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"WishlistID\",pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomDomainName}}\",\n    \"books\": [1, 2]\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}wishlists/:WishlistID",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":WishlistID"
							],
							"variable": [
								{
									"key": "WishlistID",
									"value": "{{WishlistID}}"
								}
							]
						},
						"description": "### Update Wishlist\n\nThis endpoint is used to update a wishlist by its ID.\n\n#### Request Body\n\n- `name` (string, required): The name of the wishlist.\n    \n- `books` (array, required): An array of book IDs.\n    \n\n#### Response\n\nThe response will be a JSON object with the following properties:\n\n- `name` (string): The name of the wishlist.\n    \n- `books` (array): An array of book IDs associated with the wishlist.\n    \n- `createdAt` (string): The timestamp of when the wishlist was created.\n    \n- `updatedAt` (string): The timestamp of when the wishlist was last updated.\n    \n- `id` (number): The ID of the wishlist.\n    \n\n#### Example Request\n\n``` json\n{\n  \"name\": \"examplewishlist\",\n  \"books\": [1, 2, 3]\n}\n\n ```\n\n#### Example Response\n\n``` json\n{\n  \"name\": \"updatedwishlist\",\n  \"books\": [1, 2, 3],\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-02T08:00:00Z\",\n  \"id\": 123\n}\n\n ```"
					},
					"response": [
						{
							"name": "4.4 Update Wishlist",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomDomainName}}\",\n    \"books\": [1, 2]\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}wishlists/:WishlistID",
									"host": [
										"{{baseURL}}wishlists"
									],
									"path": [
										":WishlistID"
									],
									"variable": [
										{
											"key": "WishlistID",
											"value": "{{WishlistID}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "154"
								},
								{
									"key": "ETag",
									"value": "W/\"9a-kAiB70fsC3m4/abMshCgzz2wKds\""
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:37:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"will.name\",\n    \"books\": [\n        1,\n        2\n    ],\n    \"createdAt\": \"2025-05-04T12:37:19.130Z\",\n    \"updatedAt\": \"2025-05-04T12:37:31.211Z\",\n    \"id\": 41\n}"
						}
					]
				},
				{
					"name": "4.5 Delete Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// [2.5] TC01 - Validate that status code is 200 or 201\r",
									"pm.test(\"[2.5] TC01 - Validate that status code is 204 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									"\r",
									"// [2.5] TC02 - Validate that response time is under 500ms\r",
									"pm.test(\"[2.5] TC02 - Validate that response time is under 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// [2.5] TC03 - Validate response body is empty\r",
									"pm.test(\"[2.5] TC03 - Validate response body is empty\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    pm.expect(responseBody).to.be.empty;\r",
									"});\r",
									"\r",
									"// [2.5] TC04 - Validate that no JSON parsing errors occur\r",
									"pm.test(\"[2.5] TC04 - Validate that no JSON parsing errors occur\", function () {\r",
									"    const responseBody = pm.response.text().trim();\r",
									"    if (responseBody !== \"\") {\r",
									"        try {\r",
									"            JSON.parse(responseBody);\r",
									"            pm.expect(true).to.be.true;\r",
									"        } catch (e) {\r",
									"            pm.expect.fail(\"Response body is not valid JSON\");\r",
									"        }\r",
									"    } else {\r",
									"        pm.expect(true).to.be.true; // Empty body is acceptable\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:WishlistID",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":WishlistID"
							],
							"variable": [
								{
									"key": "WishlistID",
									"value": "{{WishlistID}}"
								}
							]
						},
						"description": "### Delete Wishlist\n\nThis endpoint is used to delete a wishlist by its ID.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nThe response will not contain a response body. The status code will indicate the success or failure of the deletion operation."
					},
					"response": [
						{
							"name": "4.5 Delete Wishlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}wishlists/:WishlistID",
									"host": [
										"{{baseURL}}wishlists"
									],
									"path": [
										":WishlistID"
									],
									"variable": [
										{
											"key": "WishlistID",
											"value": "{{WishlistID}}"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sun, 04 May 2025 12:37:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "### 📌 **Purpose**:\n\nThe `wishlists` folder contains personal book lists linked to users. It's used to simulate preferences, goals, or gift registries.\n\n### 📦 **Data Structure**:\n\nWishlist objects have:\n\n- `id`: Unique identifier.\n    \n- `name`: Wishlist title (auto-generated or custom).\n    \n- `books`: An array of book IDs.\n    \n- `createdAt`, `updatedAt`: Metadata.\n    \n\n### 🔗 **Relationships**:\n\n- Each `user` has a `wishlistId`.\n    \n- Each wishlist contains `book` references by ID.\n    \n\n### ⚙️ **Special Notes**:\n\n- Book list is flat (not nested with book details).\n    \n- Adding/removing books only modifies the `books` array.\n    \n- `GET /wishlists/:id/books` can return full book objects for display."
		}
	],
	"variable": [
		{
			"key": "previous_id",
			"value": ""
		},
		{
			"key": "BookID",
			"value": ""
		},
		{
			"key": "HouseholdID",
			"value": ""
		},
		{
			"key": "UserID",
			"value": ""
		},
		{
			"key": "WishlistID",
			"value": ""
		}
	]
}